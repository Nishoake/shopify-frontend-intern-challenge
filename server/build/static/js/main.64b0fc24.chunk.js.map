{"version":3,"sources":["services/newQuery.js","components/Notification.js","App.js","index.js"],"names":["searchQuery","info","a","axios","get","response","data","Response","Search","console","log","Notification","completedList","className","App","useState","query","setQuery","searchResults","setSearchResults","nominationList","setNominationList","setCompletedList","useEffect","check","JSON","parse","localStorage","getItem","stringify","newQuery","fetchData","setItem","length","setTimeout","type","value","onChange","e","target","map","r","key","imdbID","Title","Year","disabled","movie","some","nominee","onClick","shortList","push","nominateMovie","n","filter","removeMovie","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAmBe,GAAEA,YAhBA,uCAAG,WAAMC,GAAN,eAAAC,EAAA,+EAEOC,IAAMC,IAAN,UAJX,UAIW,YAAwBH,IAF/B,YAEVI,EAFU,QAIHC,KAAKC,SAJF,yCAKPF,EAASC,KAAKE,QALP,gCAQT,MARS,gCAWhBC,QAAQC,IAAR,0BAXgB,yDAAH,uDCWFC,EAZM,SAAC,GACpB,OAD0C,EAApBC,cAKpB,yBAAKC,UAAU,gBACb,4DAJK,M,MC4JIC,MA1Jf,WAEE,IAGA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOH,EAAP,KAAsBU,EAAtB,KAqEE,OAlEFC,qBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAVd,kBAYxBnB,QAAQC,IAAR,kBAAuBe,KAAKI,UAAUL,KAClCA,GACFH,EAAkBG,KAEnB,IAGHD,qBAAU,WAAM,4CACd,4BAAArB,EAAA,sEACyB4B,EAAS9B,YAAYgB,GAD9C,YACQX,EADR,iDAIWc,EAAiBd,IAJ5B,gCAOSc,EAAiB,KAP1B,4CADc,sBAWD,KAAVH,GAXY,WAAD,wBAYZe,KAGD,CAACf,EAAOI,IAGXG,qBAAU,WACRI,aAAaK,QAtCW,gBAsCgBP,KAAKI,UAAUT,IAE1B,IAA1BA,EAAea,SAChBX,GAAiB,GAEjBY,YAAW,WACTZ,GAAiB,KAChB,QAEJ,CAACF,IA6BA,yBAAKP,UAAU,QACb,4CAGA,kBAAC,EAAD,CAAcD,cAAeA,IAE7B,yBAAKC,UAAU,QACb,0CACA,8BACE,2BAAOsB,KAAK,OAAOC,MAAOpB,EAAOqB,SAnC5B,SAACC,GACdrB,EAASqB,EAAEC,OAAOH,YAsCd,yBAAKvB,UAAU,QACb,2CAAiBG,EAAjB,KACA,4BACGE,EAAcsB,KAAI,SAAAC,GAAC,OAClB,wBAAIC,IAAKD,EAAEE,QACRF,EAAEG,MADL,KACcH,EAAEI,KADhB,IAEE,4BACEV,KAAK,SAELW,UA9BOC,EA8BiBN,EA7BtBrB,EAAe4B,MAAK,SAAAC,GAAO,OAAIA,EAAQN,SAAWI,EAAMJ,WAAqC,IAA1BvB,EAAea,QA8BpFiB,QAAS,kBA5CH,SAACD,GACrB,IAAME,EAAS,YAAO/B,GACtB+B,EAAUC,KAAKH,GACf5B,EAAkB8B,GAyCWE,CAAcZ,KAJ/B,aA3BQ,IAACM,OAwCjB,yBAAKlC,UAAU,QACb,4CACA,4BACGO,EAAeoB,KAAI,SAAAc,GAAC,OACnB,wBAAIZ,IAAKY,EAAEX,QACRW,EAAEV,MADL,KACcU,EAAET,KADhB,IAEE,4BACEV,KAAK,SACLe,QAAS,kBAtDL,SAACD,GACnB,IAAME,EAAY/B,EAAemC,QAAO,SAAAR,GAAK,OAAIA,EAAMJ,SAAWM,EAAQN,UAC1EtB,EAAkB8B,GAoDWK,CAAYF,KAF7B,kBCtHhBG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.64b0fc24.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/search'\n\nconst searchQuery = async info => {\n  try{\n    const response = await axios.get(`${baseUrl}/${info}`)\n\n    if (response.data.Response) {\n      return response.data.Search\n    }\n\n    return null\n\n  } catch(error) {\n    console.log(`WARNING: ${error}`)\n  }\n  \n}\n\nexport default { searchQuery }","import React from 'react'\n\nconst Notification = ({ completedList }) => {\n  if (!completedList) {\n    return null\n  }\n  return (\n    <div className=\"notification\">\n      <h1>Completed List ðŸŽŠ</h1>\n    </div>\n  )\n\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport newQuery from './services/newQuery'\nimport Notification from './components/Notification'\nimport './styles.css'\n\n\nfunction App() {\n  // Local Storage Key for the nominationList array\n  const LOCAL_STORAGE_KEY = \"shoppies-list\"\n\n  // State Variables\n  const [query, setQuery] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [nominationList, setNominationList] = useState([])\n  const [completedList, setCompletedList] = useState(false)\n\n  // Check the localStorage for an existing nominationList\n  useEffect(() => {\n    const check = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    \n    console.log(`check = ${JSON.stringify(check)}`)\n    if (check){\n      setNominationList(check)\n    }\n  }, [])\n\n  // Fetch movie results with useEffect hook\n  useEffect(() => {\n    async function fetchData() {\n      const response = await newQuery.searchQuery(query)\n\n      if(response){\n        return setSearchResults(response)\n      }\n      \n      return setSearchResults([])\n    }\n\n    if(query !== \"\"){\n      fetchData()\n    }\n\n  }, [query, nominationList])\n\n  // Persist nominationList changes to localStorage and toggle completion notification/banner\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(nominationList))\n\n    if(nominationList.length === 5){\n      setCompletedList(true)\n\n      setTimeout(() => {\n        setCompletedList(false)\n      }, 3000)\n    }\n  }, [nominationList])\n\n  // Event Handler for search\n  const search = (e) => {\n    setQuery(e.target.value)\n  }\n\n  // Event Handler for Nominate button\n  const nominateMovie = (nominee) => {\n    const shortList = [...nominationList]\n    shortList.push(nominee)\n    setNominationList(shortList)\n  }\n\n  // Event Handler for Nominate button\n  const removeMovie = (nominee) => {\n    const shortList = nominationList.filter(movie => movie.imdbID !== nominee.imdbID)\n    setNominationList(shortList)\n  }\n\n  // Event Handler for rendering disabled button\n  const disableButton = (movie) => {\n    const result = (nominationList.some(nominee => nominee.imdbID === movie.imdbID) || nominationList.length === 5)\n    return result\n  }\n\n  // Conditionally render when search results are available\n  // if (searchResults){\n    return (\n      <div className=\"flex\">\n        <h1>\n          The Shoppies\n        </h1>\n        <Notification completedList={completedList}/>\n\n        <div className=\"card\">\n          <p>Movie Title</p>\n          <form>\n            <input type=\"text\" value={query} onChange={search}></input>\n          </form>\n        </div>\n\n        <div className=\"card\">\n          <p>Results for \"{query}\"</p>\n          <ul>\n            {searchResults.map(r =>\n              <li key={r.imdbID}>\n                {r.Title} ({r.Year}) \n                <button \n                  type=\"button\" \n                  // disabled={false}\n                  disabled={disableButton(r)}\n                  onClick={() => nominateMovie(r)}\n                >\n                  Nominate\n                </button>\n              </li>\n            )}\n          </ul>\n        </div>\n\n        <div className=\"card\">\n          <p>Nominees List</p>\n          <ul>\n            {nominationList.map(n =>\n              <li key={n.imdbID}>\n                {n.Title} ({n.Year}) \n                <button\n                  type=\"button\"\n                  onClick={() => removeMovie(n)}\n                >\n                  Remove\n                </button>\n              </li>\n            )}\n          </ul>\n        </div>\n\n      </div>\n    )\n  // } \n  // else {\n  //   return (\n  //     <div className=\"flex\">\n  //       <h1>\n  //         The Shoppies\n  //     </h1>\n\n  //       <div className=\"card\">\n  //         <p>Movie Title</p>\n  //         <form>\n  //           <input type=\"text\" value={query} onChange={search}></input>\n  //         </form>\n  //       </div>\n\n  //       <div className=\"card\">\n  //         <p>Results for \"{query}\"</p>\n  //       </div>\n\n  //     </div>\n  //   )\n  // }\n  \n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}